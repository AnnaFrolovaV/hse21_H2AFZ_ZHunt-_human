# -*- coding: utf-8 -*-
"""Homework_bioinfa_Anna_Frolova.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1x_bGkmoA5bxSEhD3m277m4dHOB2eRr7E

# Анализ пиков гистоновой метки
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

H2AFZ_1 = 'ENCFF387IHH.bed'
H2AFZ_2 = 'ENCFF806HVP.bed'

H2AFZ_1 = pd.read_csv(H2AFZ_1, sep='\t', names=['chr', 'start', 'end', '1', '2', '3', '4', '5', '6', '7'])
H2AFZ_1 = H2AFZ_1.drop(columns=['1', '2', '3', '4', '5', '6', '7'])
H2AFZ_2 = pd.read_csv(H2AFZ_2, sep='\t', names=['chr', 'start', 'end', '1', '2', '3', '4', '5', '6', '7'])
H2AFZ_2 = H2AFZ_2.drop(columns=['1', '2', '3', '4', '5', '6', '7'])

H2AFZ_1['len'] = H2AFZ_1['end'] - H2AFZ_1['start']
H2AFZ_2['len'] = H2AFZ_2['end'] - H2AFZ_2['start']

# Commented out IPython magic to ensure Python compatibility.
# Строим гистограмму длин участков для первого эксперимента
# %config InlineBackend.figure_format = 'retina'
plt.rcParams['figure.figsize'] = 8, 5
plt.rcParams['font.size'] = 12

sns.histplot(H2AFZ_1['len'], color = 'blue')
plt.title('H2AFZ, first experiment, number of peaks = ' + str(len(H2AFZ_1)))
plt.xlabel('length')
plt.ylabel('count')
plt.show()

# Commented out IPython magic to ensure Python compatibility.
# Строим гистограмму длин участков для второго эксперимента
# %config InlineBackend.figure_format = 'retina'
plt.rcParams['figure.figsize'] = 8, 5
plt.rcParams['font.size'] = 12

sns.histplot(H2AFZ_2['len'], color = 'blue')
plt.title('H2AFZ, second experiment, number of peaks = ' + str(len(H2AFZ_2)))
plt.xlabel('length')
plt.ylabel('count')
plt.show()

# Среди ChIP-seq пиков для нужной версии генома выкидываем слишком длинные пики (outliers)
# Порог - 2000
H2AFZ_1 = H2AFZ_1.drop(H2AFZ_1.loc[(H2AFZ_1['len'] > 2000)].index)
H2AFZ_2 = H2AFZ_2.drop(H2AFZ_2.loc[(H2AFZ_2['len'] > 2000)].index)

# Commented out IPython magic to ensure Python compatibility.
# Строим гистограмму распределения длин пиков первого эксперимента после фильтрации
# %config InlineBackend.figure_format = 'retina'
plt.rcParams['figure.figsize'] = 8, 5
plt.rcParams['font.size'] = 12

sns.histplot(H2AFZ_1['len'], color = 'blue')
plt.title('H2AFZ, filtered first experiment, number of peaks = ' + str(len(H2AFZ_1)))
plt.xlabel('length')
plt.ylabel('count')
plt.show()

# Commented out IPython magic to ensure Python compatibility.
# Строим гистограмму распределения длин пиков второго эксперимента после фильтрации
# %config InlineBackend.figure_format = 'retina'
plt.rcParams['figure.figsize'] = 8, 5
plt.rcParams['font.size'] = 12

sns.histplot(H2AFZ_2['len'], color = 'blue')
plt.title('H2AFZ, filtered second experiment, number of peaks = ' + str(len(H2AFZ_2)))
plt.xlabel('length')
plt.ylabel('count')
plt.show()

!pip install pybedtools

H2AFZ_1.to_csv('H2AFZ_1_ENCFF387IHH.bed.filtered.bed', index=None, sep="\t", header=None)
H2AFZ_2.to_csv('H2AFZ_2_ENCFF806HVP.bed.filtered.bed', index=None, sep="\t",  header=None)

!wget https://github.com/arq5x/bedtools2/releases/download/v2.30.0/bedtools.static.binary
!mv bedtools.static.binary bedtools
!chmod a+x bedtools

!./bedtools intersect -a 3_UTR_Exons_Tables.bed -b ENCFF387IHH.bed -wa > 3_UTR_Exons_laps_gist1.bed
!./bedtools intersect -a 5_UTR_Exons_Tables.bed -b ENCFF387IHH.bed -wa > 5_UTR_Exons_laps_gist1.bed
!./bedtools intersect -a Coding_Exons_Tables.bed -b ENCFF387IHH.bed -wa > Coding_Exons_laps_gist1.bed
!./bedtools intersect -a Introns_plus_Tables.bed -b ENCFF387IHH.bed -wa > Introns_plus_laps_gist1.bed
!./bedtools intersect -a Upstream_by_Tables.bed -b ENCFF387IHH.bed -wa > Upstream_by_laps_gist1.bed

UTR3_Exons_laps_gist1_df = pd.read_csv('3_UTR_Exons_laps_gist1.bed', sep = '\t')
UTR5_Exons_laps_gist1_df = pd.read_csv('5_UTR_Exons_laps_gist1.bed', sep = '\t')
Coding_Exons_laps_gist1_df = pd.read_csv('Coding_Exons_laps_gist1.bed', sep = '\t')
Introns_plus_laps_gist1_df = pd.read_csv('Introns_plus_laps_gist1.bed', sep = '\t')
Upstream_by_laps_gist1_df = pd.read_csv('Upstream_by_laps_gist1.bed', sep = '\t')
UTR3_Exons_laps_gist1_df = UTR3_Exons_laps_gist1_df.drop_duplicates()
UTR5_Exons_laps_gist1_df = UTR5_Exons_laps_gist1_df.drop_duplicates()
Coding_Exons_laps_gist1_df = Coding_Exons_laps_gist1_df.drop_duplicates()
Introns_plus_laps_gist1_df = Introns_plus_laps_gist1_df.drop_duplicates()
Upstream_by_laps_gist1_df = Upstream_by_laps_gist1_df.drop_duplicates()

# Смотрим, где располагаются пики гистоновой метки относительно аннотированных генов для первого эксперимента
# Creating dataset
DNA = ['3\' UTR Exons', '5\' UTR Exons', 'Coding Exons',
        'Introns plus', 'Upstream by']
  
data = [
len(UTR3_Exons_laps_gist1_df)
, len(UTR5_Exons_laps_gist1_df)
, len(Coding_Exons_laps_gist1_df)
, len(Introns_plus_laps_gist1_df)
, len(Upstream_by_laps_gist1_df)]
  
# Creating plot
fig = plt.figure(figsize =(10, 7))
plt.pie(data, labels = DNA, autopct='%1.1f%%')
  
plt.title('Расположение пиков гистоновых меток относительно аннотированных генов, первый эксперимент')
# show plot
plt.show()

!./bedtools intersect -a 3_UTR_Exons_Tables.bed -b ENCFF806HVP.bed -wa > 3_UTR_Exons_laps_gist2.bed
!./bedtools intersect -a 5_UTR_Exons_Tables.bed -b ENCFF806HVP.bed -wa > 5_UTR_Exons_laps_gist2.bed
!./bedtools intersect -a Coding_Exons_Tables.bed -b ENCFF806HVP.bed -wa > Coding_Exons_laps_gist2.bed
!./bedtools intersect -a Introns_plus_Tables.bed -b ENCFF806HVP.bed -wa > Introns_plus_laps_gist2.bed
!./bedtools intersect -a Upstream_by_Tables.bed -b ENCFF806HVP.bed -wa > Upstream_by_laps_gist2.bed

UTR3_Exons_laps_gist2_df = pd.read_csv('3_UTR_Exons_laps_gist2.bed', sep = '\t')
UTR5_Exons_laps_gist2_df = pd.read_csv('5_UTR_Exons_laps_gist2.bed', sep = '\t')
Coding_Exons_laps_gist2_df = pd.read_csv('Coding_Exons_laps_gist2.bed', sep = '\t')
Introns_plus_laps_gist2_df = pd.read_csv('Introns_plus_laps_gist2.bed', sep = '\t')
Upstream_by_laps_gist2_df = pd.read_csv('Upstream_by_laps_gist2.bed', sep = '\t')
UTR3_Exons_laps_gist2_df = UTR3_Exons_laps_gist2_df.drop_duplicates()
UTR5_Exons_laps_gist2_df = UTR5_Exons_laps_gist2_df.drop_duplicates()
Coding_Exons_laps_gist2_df = Coding_Exons_laps_gist2_df.drop_duplicates()
Introns_plus_laps_gist2_df = Introns_plus_laps_gist2_df.drop_duplicates()
Upstream_by_laps_gist2_df = Upstream_by_laps_gist2_df.drop_duplicates()

# Смотрим, где располагаются пики гистоновой метки относительно аннотированных генов для второго эксперимента
# Creating dataset
DNA = ['3\' UTR Exons', '5\' UTR Exons', 'Coding Exons',
        'Introns plus', 'Upstream by']
  
data = [
len(UTR3_Exons_laps_gist2_df)
, len(UTR5_Exons_laps_gist2_df)
, len(Coding_Exons_laps_gist2_df)
, len(Introns_plus_laps_gist2_df)
, len(Upstream_by_laps_gist2_df)]
  
# Creating plot
fig = plt.figure(figsize =(10, 7))
plt.pie(data, labels = DNA, autopct='%1.1f%%')
plt.title('Расположение пиков гистоновых меток относительно аннотированных генов, второй эксперимент')

# show plot
plt.show()

# Объединяем два набора отфильтрованных ChIP-seq пиков с помощью утилиты bedtools merge
!cat  *.filtered.bed  |   sort -k1,1 -k2,2n   |   ./bedtools merge   >   H2AFZ.merge.bed

# Визуализируем исходные два набора ChIP-seq пиков, а также их объединение в геномном браузере, и проверяем корректность работы bedtools merge.
from IPython.display import Image, display
display(Image('Genome_Browser.jpg'))

"""Ссылка на Genome Browser - http://genome.ucsc.edu/cgi-bin/hgTracks?db=hg19&lastVirtModeType=default&lastVirtModeExtraState=&virtModeType=default&virtMode=0&nonVirtPosition=&position=chr12%3A32906964%2D32910572&hgsid=1207312039_0Pn3Au7XoCeNdFAC3avJ0Mkr18o9

# Анализ участков вторичной стр-ры ДНК
"""

zhunt = 'zhunt.bed'
zhunt = pd.read_csv(zhunt, sep='\t', names=['chr', 'start', 'end'])
zhunt['len'] = zhunt['end'] - zhunt['start']

# Commented out IPython magic to ensure Python compatibility.
# %config InlineBackend.figure_format = 'retina'
plt.rcParams['figure.figsize'] = 8, 5
plt.rcParams['font.size'] = 12

sns.histplot(zhunt['len'], color = 'blue')
plt.title('zhunt, number of peaks = ' + str(len(zhunt)))
plt.xlabel('length')
plt.ylabel('count')
plt.show()

!./bedtools intersect -a 3_UTR_Exons_Tables.bed -b zhunt.bed -wa > 3_UTR_Exons_laps_zhunt.bed
!./bedtools intersect -a 5_UTR_Exons_Tables.bed -b zhunt.bed -wa > 5_UTR_Exons_laps_zhunt.bed
!./bedtools intersect -a Coding_Exons_Tables.bed -b zhunt.bed -wa > Coding_Exons_laps_zhunt.bed
!./bedtools intersect -a Introns_plus_Tables.bed -b zhunt.bed -wa > Introns_plus_laps_zhunt.bed
!./bedtools intersect -a Upstream_by_Tables.bed -b zhunt.bed -wa > Upstream_by_laps_zhunt.bed

UTR3_Exons_laps_zhunt_df = pd.read_csv('3_UTR_Exons_laps_zhunt.bed', sep = '\t')
UTR5_Exons_laps_zhunt_df = pd.read_csv('5_UTR_Exons_laps_zhunt.bed', sep = '\t')
Coding_Exons_laps_zhunt_df = pd.read_csv('Coding_Exons_laps_zhunt.bed', sep = '\t')
Introns_plus_laps_zhunt_df = pd.read_csv('Introns_plus_laps_zhunt.bed', sep = '\t')
Upstream_by_laps_zhunt_df = pd.read_csv('Upstream_by_laps_zhunt.bed', sep = '\t')
UTR3_Exons_laps_zhunt_df = UTR3_Exons_laps_zhunt_df.drop_duplicates()
UTR5_Exons_laps_zhunt_df = UTR5_Exons_laps_zhunt_df.drop_duplicates()
Coding_Exons_laps_zhunt_df = Coding_Exons_laps_zhunt_df.drop_duplicates()
Introns_plus_laps_zhunt_df = Introns_plus_laps_zhunt_df.drop_duplicates()
Upstream_by_laps_zhunt_df = Upstream_by_laps_zhunt_df.drop_duplicates()

# Creating dataset
DNA = ['3\' UTR Exons', '5\' UTR Exons', 'Coding Exons',
        'Introns plus', 'Upstream by']
  
data = [
len(UTR3_Exons_laps_zhunt_df)
, len(UTR5_Exons_laps_zhunt_df)
, len(Coding_Exons_laps_zhunt_df)
, len(Introns_plus_laps_zhunt_df)
, len(Upstream_by_laps_zhunt_df)]
  
# Creating plot
fig = plt.figure(figsize =(10, 7))
plt.pie(data, labels = DNA, autopct='%1.1f%%')
plt.title('Расположение участков zhunt относительно аннотированных генов')
# show plot
plt.show()



"""# Анализ пересечений гистоновой метки и стр-ры ДНК"""

# Находим пересечения гистоновых меткок и стр-рой ДНК
!./bedtools intersect  -a zhunt.bed   -b  H2AFZ.merge.bed  >  H2AFZ.intersect_with_zhunt.bed

"""Визуализация в Genome Browser:

track visibility=dense name="ENCFF387IHH"  description="H2AFZ_1.filtered.bed"
https://raw.githubusercontent.com/AnnaFrolovaV/hse21_H2AFZ_ZHunt_human/main/data/H2AFZ_1_ENCFF387IHH.bed.filtered.bed

track visibility=dense name="ENCFF806HVP"  description="H2AFZ_2.filtered.bed"
https://raw.githubusercontent.com/AnnaFrolovaV/hse21_H2AFZ_ZHunt_human/main/data/H2AFZ_2_ENCFF806HVP.bed.filtered.bed

track visibility=dense name="ChIP_merge"  color=50,50,200   description="H2AFZ.merge.bed"
https://raw.githubusercontent.com/AnnaFrolovaV/hse21_H2AFZ_ZHunt_human/main/data/H2AFZ.merge.

track visibility=dense name="zhunt"  color=0,200,0  description="zhunt"
https://raw.githubusercontent.com/AnnaFrolovaV/hse21_H2AFZ_ZHunt_human/main/data/zhunt.bed

track visibility=dense name="intersect_with_zhunt"  color=200,0,0  description="H2AFZ.intersect_with_zhunt.bed"
https://raw.githubusercontent.com/AnnaFrolovaV/hse21_H2AFZ_ZHunt_human/main/data/H2AFZ.intersect_with_zhunt.bed
"""

# Визуализируем исходные два набора ChIP-seq пиков, а также их объединение в геномном браузере, и проверяем корректность работы bedtools merge
from IPython.display import Image, display
display(Image('Intersection_with_zhunt.jpg'))

"""Ссылка на Genome Browser - 
http://genome.ucsc.edu/s/anna%20frolova/hg19_homework_session

"""

H2AFZ_intersect_with_zhunt = pd.read_csv('H2AFZ.intersect_with_zhunt.bed', sep='\t', names=['chr', 'start', 'end'])
H2AFZ_intersect_with_zhunt['len'] = H2AFZ_intersect_with_zhunt['end'] - H2AFZ_intersect_with_zhunt['start']

# Commented out IPython magic to ensure Python compatibility.
# %config InlineBackend.figure_format = 'retina'
plt.rcParams['figure.figsize'] = 15, 8
plt.rcParams['font.size'] = 12

sns.histplot(H2AFZ_intersect_with_zhunt['len'], color = 'blue')
plt.title('H2AFZ intersected with zhunt, number of peaks = ' + str(len(H2AFZ_intersect_with_zhunt)))
plt.xlabel('length')
plt.ylabel('count')
plt.show()

!./bedtools intersect -a 3_UTR_Exons_Tables.bed -b H2AFZ.intersect_with_zhunt.bed -wa > 3_UTR_Exons_laps_intersect.bed
!./bedtools intersect -a 5_UTR_Exons_Tables.bed -b H2AFZ.intersect_with_zhunt.bed -wa > 5_UTR_Exons_laps_intersect.bed
!./bedtools intersect -a Coding_Exons_Tables.bed -b H2AFZ.intersect_with_zhunt.bed -wa > Coding_Exons_laps_intersect.bed
!./bedtools intersect -a Introns_plus_Tables.bed -b H2AFZ.intersect_with_zhunt.bed -wa > Introns_plus_laps_intersect.bed
!./bedtools intersect -a Upstream_by_Tables.bed -b H2AFZ.intersect_with_zhunt.bed -wa > Upstream_by_laps_intersect.bed

UTR3_Exons_laps_intersect = pd.read_csv('3_UTR_Exons_laps_intersect.bed', sep = '\t')
UTR5_Exons_laps_intersect = pd.read_csv('5_UTR_Exons_laps_intersect.bed', sep = '\t')
Coding_Exons_laps_intersect = pd.read_csv('Coding_Exons_laps_intersect.bed', sep = '\t')
Introns_plus_laps_intersect = pd.read_csv('Introns_plus_laps_intersect.bed', sep = '\t')
Upstream_by_laps_intersect = pd.read_csv('Upstream_by_laps_intersect.bed', sep = '\t')

UTR3_Exons_laps_intersect = UTR3_Exons_laps_intersect.drop_duplicates()
UTR5_Exons_laps_intersect = UTR5_Exons_laps_intersect.drop_duplicates()
Coding_Exons_laps_intersect = Coding_Exons_laps_intersect.drop_duplicates()
Introns_plus_laps_intersect = Introns_plus_laps_intersect.drop_duplicates()
Upstream_by_laps_intersect = Upstream_by_laps_intersect.drop_duplicates()

# Смотрим, где располагаются полученные пересечения относительно аннотированных генов для второго эксперимента
# Creating dataset
DNA = ['3\' UTR Exons', '5\' UTR Exons', 'Coding Exons',
        'Introns plus', 'Upstream by']
  
data = [
len(UTR3_Exons_laps_intersect)
, len(UTR5_Exons_laps_intersect)
, len(Coding_Exons_laps_intersect)
, len(Introns_plus_laps_intersect)
, len(Upstream_by_laps_intersect)]
  
# Creating plot
fig = plt.figure(figsize =(10, 7))
plt.pie(data, labels = DNA, autopct='%1.1f%%')
plt.title('Расположение пиков пересечений zhunt и гистоновых меток относительно аннотированных генов')

# show plot
plt.show()

Genome = pd.read_csv('Genome.bed', sep='\t', names=['chr', 'start', 'end'])

!./bedtools intersect -a Genome.bed -b H2AFZ.intersect_with_zhunt.bed -wa > Genome_laps_intersect.bed

Genome_intersect_ = pd.read_csv('Genome_laps_intersect.bed', sep='\t', names=['chr', 'start', 'end'])

len_ = len(Genome_intersect_)

Genome_intersect_ = Genome_intersect_.drop_duplicates()
len_unique = len(Genome_intersect_)

print('Количество пиков, которые удалось проассоциировать с генами: ', len_)
print('Количество уникальных генов: ', len_unique)

Genome_intersect_.to_csv('Genome_unique.bed', index=None, sep="\t", header=None)

